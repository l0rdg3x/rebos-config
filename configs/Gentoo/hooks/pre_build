#!/usr/bin/env bash

system_files_path="$HOME/.config/rebos/system_files"
system_files_tmp_path="$system_files_path/tmp"
vct_path="$system_files_path/video_cards_template/$HOSTNAME"
makeopts_path="$system_files_path/makeopts_template/$HOSTNAME"
emergedefaultopts_path="$system_files_path/emerge_default_opts_template/$HOSTNAME"
pkgs_use_path="$system_files_path/pkgs_use"
pkgs_use_tmp_path="$system_files_tmp_path/pkgs_use"
pkgs_use_machine_path="$system_files_path/machine_use/$HOSTNAME"
pkgs_uses_path="$system_files_path/uses"
pkgs_accept_keywords_path="$system_files_path/pkgs_accept_keywords"
pkgs_accept_keywords_tmp_path="$system_files_tmp_path/pkgs_accept_keywords"
pkgs_mask_path="$system_files_path/pkgs_mask"
make_conf_path="$system_files_tmp_path/make.conf"
make_conf_template_path="$system_files_path/make_conf_template/make.conf"
sudo_conf_path="$system_files_path/sudo_config"
ccache_path="/var/cache/ccache/"
ccache_system_path="$system_files_path/ccache/ccache.conf"
portage_gentoo_git="$system_files_path/repos.conf/gentoo.conf"
portage_gentoo_bin="$system_files_path/binrepos.conf/gentoobinhost.conf"

overwrite_file () {
  use_sudo=0

  src="$1"
  dest="$2"

  [[ "$OFSUDO" == 1 ]] && use_sudo=1

  cmd_to_exec="cp"

  [[ "$use_sudo" == 1 ]] && cmd_to_exec="sudo ${cmd_to_exec}"

  exit_status=0

  $cmd_to_exec "$src" "$dest" > /dev/null 2>&1 || exit_status=1

  echo -en "\033[1;93mOVERWRITE\033[0m \033[0;96m${src}\033[0m -> \033[0;95m${dest}\033[0m "

  if [[ "$exit_status" == 0 ]]; then
    echo -e "\033[1;92m(^-^)\033[0m"
  else
    echo -e "\033[1;91m(T~T)\033[0m"
  fi

  return $exit_status
}

OFSUDO=1 overwrite_file "$sudo_conf_path" /etc/sudoers || exit 1

[[ -d "$system_files_tmp_path" ]] || mkdir "$system_files_tmp_path"
[[ -d "$system_files_tmp_path" ]] || exit 1

if [[ -f "$vct_path" ]]; then
  echo "Found video cards template for machine."
else
  echo "Missing video cards template for machine."

  echo "Template must be located at: $vct_path"

  exit 1
fi

if [[ -f "$makeopts_path" ]]; then
  echo "Found MAKEOPTS template for machine."
else
  echo "Missing MAKEOPTS template for machine."

  echo "Template must be located at: $makeopts_path"

  exit 1
fi

if [[ -f "$emergedefaultopts_path" ]]; then
  echo "Found EMERGE_DEFAULT_OPTS template for machine."
else
  echo "Missing EMERGE_DEFAULT_OPTS template for machine."

  echo "Template must be located at: $emergedefaultopts_path"

  exit 1
fi

if [[ -f "$pkgs_use_machine_path" ]]; then
  echo "Found machine package use flags."
else
  echo "Missing machine package use flags."

  echo "Machine use flags must be located at: $pkgs_use_machine_path"

  exit 1
fi

if [[ -d "/etc/portage/binrepos.conf" ]]; then
  echo "Gentoo bin repo already exist... skipping..."
else
  echo "Creating Gentoo bin repo path..."

  sudo mkdir -p /etc/portage/binrepos.conf
fi

video_cards="$(cat "$vct_path")"
makeopts="$(cat "$makeopts_path")"
emerge_default_opts="$(cat "$emergedefaultopts_path")"

sed -e "s|%video_cards%|${video_cards}|g" \
    -e "s|%makeopts%|${makeopts}|g" \
    -e "s|%emergedefopts%|${emerge_default_opts}|g" \
    -e "s|%ccache_path%|${ccache_path}|g" \
    "$make_conf_template_path" > "$make_conf_path"

# echo "$new_make_conf" > "$make_conf_path"

cat "$pkgs_use_path" > "$pkgs_use_tmp_path"
cat "$pkgs_use_machine_path" >> "$pkgs_use_tmp_path"

cat "$pkgs_accept_keywords_path" > "$pkgs_accept_keywords_tmp_path"

OFSUDO=1 overwrite_file "$portage_gentoo_bin" /etc/portage/binrepos.conf/gentoobinhost.conf || exit 1

OFSUDO=1 overwrite_file "$portage_gentoo_git" /etc/portage/repos.conf/gentoo.conf || exit 1

OFSUDO=1 overwrite_file "$make_conf_path" /etc/portage/make.conf || exit 1

OFSUDO=1 overwrite_file "$pkgs_use_tmp_path" /etc/portage/package.use/pkgs || exit 1

OFSUDO=1 overwrite_file "$pkgs_accept_keywords_tmp_path" /etc/portage/package.accept_keywords/pkgs || exit 1

OFSUDO=1 overwrite_file "$pkgs_mask_path" /etc/portage/package.mask/pkgs || exit 1

for i in $(find "${pkgs_uses_path}" -mindepth 1 -maxdepth 1); do
    i_basename="$(basename "$i")"

    if sudo cp "$i" "/etc/portage/package.use/pkg_${i_basename}"; then
        echo "Successfully added use flags from: '${i_basename}' (uses dir)"
    else
        echo "Failed to add use flags from: '${i_basename}' (uses dir)"

        exit 1
    fi
done

autounmask_path="/etc/portage/package.accept_keywords/zzz_autounmask"
autopkguse_path="/etc/portage/package.use/zzz_pkg_use"

if [[ -f "$autounmask_path" ]]; then
  echo "Unmasking file is already present... skipping..."
else
  echo "Creating unmasking file..."

  sudo touch "$autounmask_path"
fi

if [[ -f "$autopkguse_path" ]]; then
  echo "Auto package USE flags file is already present... skipping..."
else
  echo "Creating auto package USE flags file..."

  sudo touch "$autopkguse_path"
fi

if [[ -f "$ccache_path/ccache.conf" ]]; then
  echo "ccache config is already present... skipping..."
else
  echo "Creating ccache path and file..."

  sudo mkdir -p $ccache_path
  sudo cp $ccache_system_path $ccache_path
fi

if [[ -d "/var/db/repos/gentoo/.git" ]]; then
  echo "Gentoo repo already use git... skipping..."
else
  echo "Clean repo path for git repo..."

  sudo rm -rf /var/db/repos/gentoo/*
fi