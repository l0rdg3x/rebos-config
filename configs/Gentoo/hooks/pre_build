#!/usr/bin/env bash

system_files_path="$HOME/.config/rebos/system_files"
system_files_tmp_path="$system_files_path/tmp"
vct_path="$system_files_path/video_cards_template/$HOSTNAME"
pkgs_use_path="$system_files_path/pkgs_use"
pkgs_use_tmp_path="$system_files_tmp_path/pkgs_use"
pkgs_use_machine_path="$system_files_path/machine_use/$HOSTNAME"
pkgs_uses_path="$system_files_path/uses"
pkgs_accept_keywords_path="$system_files_path/pkgs_accept_keywords"
pkgs_accept_keywords_tmp_path="$system_files_tmp_path/pkgs_accept_keywords"
make_conf_path="$system_files_tmp_path/make.conf"
make_conf_template_path="$system_files_path/make_conf_template/make.conf"

[[ -d "$system_files_tmp_path" ]] || mkdir "$system_files_tmp_path"
[[ -d "$system_files_tmp_path" ]] || exit 1

if [[ -f "$vct_path" ]]; then
  echo "Found video cards template for machine."
else
  echo "Missing video cards template for machine."

  echo "Template must be located at: $vct_path"

  exit 1
fi

if [[ -f "$pkgs_use_machine_path" ]]; then
  echo "Found machine package use flags."
else
  echo "Missing machine package use flags."

  echo "Machine use flags must be located at: $pkgs_use_machine_path"

  exit 1
fi

# Notify the user if the first file and second file are different, and tell the user the 3rd argument.
user_nid () {
  checksum_first="$(cat "$1")"
  checksum_second="$(cat "$2")"

  [[ "$checksum_first" == "$checksum_second" ]] || echo -e "$3"
}

# user_nid() but with extra notice.
notice_nid () {
  user_nid "$1" "$2" "\033[1;33mNOTICE: $3\033[0m"
}

# Delete File If Existing (Sudo)
dfie_sudo () {
  if [[ -f "$1" ]]; then
    echo "Removing already existing '$1' file..."
  
    sudo rm "$1"
  fi
}

video_cards="$(cat "$vct_path")"

new_make_conf="$(cat "$make_conf_template_path" | sed "s/%video_cards%/${video_cards}/g")"

echo "$new_make_conf" > "$make_conf_path"

cat "$pkgs_use_path" > "$pkgs_use_tmp_path"
cat "$pkgs_use_machine_path" >> "$pkgs_use_tmp_path"

cat "$pkgs_accept_keywords_path" > "$pkgs_accept_keywords_tmp_path"

notice_nid "$make_conf_path" /etc/portage/make.conf "The Portage make.conf file has been changed!"
dfie_sudo /etc/portage/make.conf
sudo cp "$make_conf_path" /etc/portage/make.conf

notice_nid "$pkgs_use_tmp_path" /etc/portage/package.use/pkgs "The package USE flags have been changed!"
dfie_sudo /etc/portage/package.use/pkgs
sudo cp "$pkgs_use_tmp_path" /etc/portage/package.use/pkgs

notice_nid "$pkgs_accept_keywords_tmp_path" /etc/portage/package.accept_keywords/pkgs "The package accept keywords (unmasking) have been changed!"
dfie_sudo /etc/portage/package.accept_keywords/pkgs
sudo cp "$pkgs_accept_keywords_tmp_path" /etc/portage/package.accept_keywords/pkgs

for i in $(find "${pkgs_uses_path}/"*); do
    i_basename="$(basename "$i")"

    if sudo cp "$i" "/etc/portage/package.use/pkg_${i_basename}"; then
        echo "Successfully added use flags from: '${i_basename}' (uses dir)"
    else
        echo "Failed to add use flags from: '${i_basename}' (uses dir)"

        exit 1
    fi
done

autounmask_path="/etc/portage/package.accept_keywords/zzz_autounmask"
autopkguse_path="/etc/portage/package.use/zzz_pkg_use"

if [[ -f "$autounmask_path" ]]; then
  echo "Unmasking file is already present... skipping..."
else
  echo "Creating unmasking file..."

  sudo touch "$autounmask_path"
fi

if [[ -f "$autopkguse_path" ]]; then
  echo "Auto package USE flags file is already present... skipping..."
else
  echo "Creating auto package USE flags file..."

  sudo touch "$autopkguse_path"
fi
